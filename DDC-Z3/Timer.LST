C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             Timer.c (v1.00)
   3             
   4             Timer functions
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;         // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                   // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;               //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;           //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;              // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;             // increment every 2s, reset for every success communication
  37          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;     //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;          //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;       //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;     // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;       //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;         // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0;   // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          bit vibration_flag = 0;
  86          tWord vibration_count = 0;
  87          
  88          /*------------------------------------------------------------------
  89             timerT0()
  90             operation every ticket.
  91          --------------------------------------------------------------------*/
  92          
  93          void timer0() interrupt interrupt_timer_0_overflow
  94             {
  95   1         // manually reload timer0 configuration
  96   1         TH0 = timer0_8H;
  97   1         TL0 = timer0_8L;
  98   1         
  99   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 100   1         if(++timer0_count >= 2000)
 101   1            {
 102   2            // reset timer0 ticket counter every 2s
 103   2            timer0_count=0;
 104   2            
 105   2            // detect the battery voltage
 106   2            ADC_check_result = GetADCResult(6); 
 107   2            }
 108   1                        
 109   1         // detect whether key is rotated on,  
 110   1         if((key_rotate == 0)&&(key_rotated_on_flag == 0))     
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 3   

 111   1            {
 112   2            Delay(5);
 113   2            // anti-trigger, Delay(5) confirm the key rotation.
 114   2            if(key_rotate == 0)
 115   2               {
 116   3               slave_nearby_operation();
 117   3               // flag key rotation status
 118   3               key_rotated_on_flag = 1;
 119   3               }
 120   2            } 
 121   1            
 122   1         
 123   1         // detect whether key is rotated off
 124   1         if(vibration_flag == 0)
 125   1            {
 126   2            if((key_rotate == 1)&&(key_rotated_on_flag == 1))
 127   2               {
 128   3               Delay(5);
 129   3               if(key_rotate == 1)
 130   3                  {
 131   4                  // handle with battery status
 132   4                  verifybattery(ADC_check_result);
 133   4                  // reset key rotation flag
 134   4                  key_rotated_on_flag=0;
 135   4                  
 136   4                  slave_away_operation();
 137   4                  }
 138   3               }
 139   2            }
 140   1            
 141   1         if(vibration_flag == 1)
 142   1            {
 143   2            if(++vibration_count > 3000)
 144   2               {
 145   3               vibration_flag = 0;
 146   3               vibration_count = 0;
 147   3               }
 148   2            }     
 149   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 150   1            {
 151   2            vibration_flag = 1;
 152   2            vibration_count = 0;
 153   2            }     
 154   1      
 155   1         // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 156   1         if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 157   1            {
 158   2            stolen_alarm_flag = 1;
 159   2            if(key_rotate == 1)
 160   2               {
 161   3               ComMode_3_Data();
 162   3               stolen_alarm_speech1();
 163   3               }
 164   2            if(++host_stolen_alarm1_count >= 4)
 165   2               {
 166   3               host_stolen_alarm1_count = 0;
 167   3               host_stolen_alarm1_EN = 0;
 168   3               stolen_alarm_flag = 0;
 169   3               }
 170   2            }
 171   1         if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 172   1            {
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 4   

 173   2            stolen_alarm_flag = 1;
 174   2            if(key_rotate == 1)
 175   2               {
 176   3               ComMode_3_Data();
 177   3               stolen_alarm_speech2();
 178   3               }
 179   2            if(++host_stolen_alarm2_count >= 4)
 180   2               {
 181   3               host_stolen_alarm2_count = 0;
 182   3               host_stolen_alarm2_EN = 0;
 183   3               stolen_alarm_flag = 0;
 184   3               }
 185   2            }
 186   1         
 187   1         if((battery_stolen_EN == 1)&&(battery_stolen_count < 6))
 188   1            {
 189   2            ComMode_2_Data();
 190   2            battery_stolen_speech();
 191   2            battery_stolen_count++;
 192   2            }
 193   1               
 194   1      
 195   1         // judge host is fell or raised every 1ms?
 196   1         if(raised_fell_flag == 0)
 197   1            {
 198   2            // judge vibration sensor is enable?
 199   2            if(sensor_EN == 1)   
 200   2               {        
 201   3               // sensor trigger status, 0, 1 or 2?
 202   3               switch(sensor_trigger_count)
 203   3                  {
 204   4                  // case 0, it means host is in waiting status. waiting for first touch.
 205   4                  case 0:
 206   4                     {
 207   5                     
 208   5                     // judge host been touched and also not in vibration alarm
 209   5      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 210   5                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))      
 211   5                        {
 212   6                        // judge LV is more than 2ms, if yes, it means a effective touch
 213   6                        if(++sensor_1ststage_count >= 2)       
 214   6                           {
 215   7                           sensor_1ststage_count=0;
 216   7                           
 217   7                           // sensor trigge status progress to case 1.
 218   7                           sensor_trigger_count = 1;
 219   7                           // alarm speech for first touoch
 220   7                           host_touch_speech();
 221   7                           }
 222   6                        }
 223   5                     else
 224   5                        {
 225   6                        // if no LV, reset the count.
 226   6                        sensor_1ststage_count = 0;
 227   6                        }
 228   5                     }
 229   4                  break;
 230   4                  
 231   4                  // waiting for next touch, 
 232   4                  case 1:
 233   4                     {
 234   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 5   

 235   5                        {
 236   6                        // LV for 2s, means a effective touch
 237   6                        if(++sensor_2ndstage_count >= 2)
 238   6                           {
 239   7                           sensor_2ndstage_count = 0;
 240   7                           sensor_trigger_count = 2;
 241   7                           host_2ndtouch_speech_count = 0;
 242   7                           // alarm speech for 2nd touch
 243   7                           host_2ndtouch_speech();
 244   7                           }
 245   6                        }
 246   5                     else
 247   5                        {
 248   6                        sensor_2ndstage_count = 0;
 249   6                        }
 250   5                     
 251   5                     // if there is no touch in 4s, reset sensor trigger status, etc.
 252   5                     if(++sensor_2ndstage_time >= 4000)
 253   5                        {
 254   6                        sensor_trigger_count = 0;
 255   6                        sensor_2ndstage_count = 0;
 256   6                        sensor_1ststage_count = 0;
 257   6                        sensor_2ndstage_time = 0;
 258   6                        }
 259   5                     }
 260   4                  break;
 261   4                  
 262   4                  // waiting for 3rd touch
 263   4                  case 2:
 264   4                     {
 265   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 266   5                        {
 267   6                        // 2s LV is a effective touch
 268   6                        if(++sensor_3rdstage_count >= 2)
 269   6                           {
 270   7                           sensor_3rdstage_count = 0;
 271   7                           // stolen alarm speech enable
 272   7                           host_stolen_alarm1_EN = 1;
 273   7                           host_stolen_alarm2_EN = 1;                
 274   7                           }
 275   6                        }
 276   5                     else
 277   5                        {
 278   6                        sensor_3rdstage_count = 0;
 279   6                        }
 280   5                     
 281   5                     // if there is no touch in 4s, reset all.
 282   5                     if(++sensor_3rdstage_time >= 4000)
 283   5                        {
 284   6                        sensor_trigger_count = 0;
 285   6                        sensor_1ststage_count = 0;
 286   6                        sensor_2ndstage_count = 0;
 287   6                        sensor_2ndstage_time = 0;
 288   6                        sensor_3rdstage_time = 0;
 289   6                        sensor_3rdstage_interval = 800;
 290   6                        sensor_3rdstage_count = 0;
 291   6                        sensor_3rdstage_effcount = 0;             
 292   6                        }
 293   5                     }
 294   4                  break;
 295   4                  }
 296   3               
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 6   

 297   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 298   3               if((wire_broken == 0) && (wire_broken_count < 51))  
 299   3                  {
 300   4                  if(++wire_broken_count > 50)
 301   4                     {
 302   5                     host_stolen_alarm1_EN = 1;
 303   5                     host_stolen_alarm2_EN = 1; 
 304   5                     wire_broken_count = 51;
 305   5                     }
 306   4                  }
 307   3               
 308   3               // judge whether battery has been stolen, 0.4V/4V
 309   3               if(ADC_check_result < 0x100)
 310   3                  {
 311   4                  battery_stolen_EN = 1;
 312   4                  }
 313   3               else if(ADC_check_result > 0x200)
 314   3                  {
 315   4                  battery_stolen_EN = 0;
 316   4                  battery_stolen_count = 0;
 317   4                  }        
 318   3               }
 319   2            }
 320   1         
 321   1         // judge whether position sensor is enable
 322   1         if(position_sensor_EN==1)     
 323   1            {
 324   2            // judge whether there is a LV
 325   2            if(raised_sensor_detect == 0) 
 326   2               {
 327   3               // LV > 0.5s means a effective input
 328   3               if(++raise_wire_time==10)
 329   3                  {
 330   4                  // flag raised, and reset fell
 331   4                  raised_flag=1;
 332   4                  fell_flag=0;
 333   4                  // judge whether there once been a raised or fell.
 334   4                  if(raised_fell_once_flag == 0)
 335   4                     {
 336   5                     // if no, flag raised and fell flag
 337   5                     raised_fell_flag = 1;               
 338   5                     }
 339   4                  }     
 340   3               }
 341   2            else
 342   2               {
 343   3               raised_flag=0;
 344   3               raised_alarm_count=0;
 345   3               raise_wire_time=0;
 346   3               raised_fell_flag = 0;
 347   3               }
 348   2            // judge whether there is a LV
 349   2            if(fell_sensor_detect==0)
 350   2               {
 351   3               // LV > 0.5s means a effective input
 352   3               if(++fell_wire_time==10)   
 353   3                  {
 354   4                  // flag fell, and reset raised
 355   4                  fell_flag=1;         
 356   4                  raised_flag=0;
 357   4                  // judge whether there once been a raised or fell
 358   4                  if(raised_fell_once_flag == 0)
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 7   

 359   4                     {
 360   5                     raised_fell_flag = 1;               
 361   5                     }
 362   4                  }     
 363   3               }
 364   2            else
 365   2               {
 366   3               fell_flag=0;
 367   3               fell_alarm_count=0;
 368   3               fell_wire_time=0;
 369   3               raised_fell_flag = 0;
 370   3               }
 371   2            }
 372   1         
 373   1         // judge whether raised or fell, if yes, reset all after 10s.
 374   1         if(raised_fell_flag == 1)
 375   1            {
 376   2            if(++raised_fell_number >= 4000)
 377   2               {
 378   3               raised_fell_flag = 0;
 379   3               raised_fell_number = 0;
 380   3               raised_fell_once_flag = 1;
 381   3               
 382   3               sensor_trigger_count = 0;
 383   3               sensor_1ststage_count = 0;
 384   3               sensor_2ndstage_count = 0;
 385   3               sensor_2ndstage_time = 0;
 386   3               sensor_3rdstage_time = 0;
 387   3               sensor_3rdstage_interval = 800;
 388   3               sensor_3rdstage_count = 0;
 389   3               sensor_3rdstage_effcount = 0;             
 390   3               }
 391   2            }
 392   1         
 393   1         // detect the horizontal sensor
 394   1         if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 395   1            {
 396   2            Delay(3);
 397   2            if((horizontal_sensor == 0)||(sensor_detect == 0))
 398   2               {
 399   3               horizontal_vibration = 1;
 400   3               horizontal_vibration_count = 0;
 401   3               }
 402   2            }
 403   1         if(++horizontal_vibration_count >= 5000)
 404   1            {
 405   2            horizontal_vibration_count = 5001;
 406   2            horizontal_vibration = 0;
 407   2            }
 408   1         }
 409          
 410          
 411          /*--------------------------------------------------------------------
 412             timerT1()
 413             ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 414          --------------------------------------------------------------------*/
 415          
 416          void timerT1() interrupt interrupt_timer_1_overflow
 417             {
 418   1         // reload timer1
 419   1         TH1 = timer1_8H;           
 420   1         TL1 = timer1_8L;
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 8   

 421   1         
 422   1         // receive a tyte
 423   1         receive_byte();
 424   1         
 425   1         // receive a word after every byte
 426   1         receive_word();
 427   1         
 428   1         // judge whether a byte has received successfully
 429   1         if(receive_data_finished_flag == 1)
 430   1            {
 431   2            receive_data_finished_flag = 0;
 432   2            // judge which mode is received.
 433   2            switch(received_data_buffer[2])     
 434   2               {
 435   3               case ComMode_1:  
 436   3                  {
 437   4                  if((nearby_away_interval > 6)||(key_rotate == 0))
 438   4                     {
 439   5                     // if receive a ComMode_1 successfully, operation for slave nearby
 440   5                     slave_nearby_EN = 1;
 441   5                     nearby_away_interval = 0;              
 442   5                     }
 443   4                  leave_count = 0;
 444   4                  
 445   4                  // turn off vibration and position sensor
 446   4                  sensor_EN = 0;                   
 447   4                  position_sensor_EN=0;         
 448   4                  // reset all the flag in sensor
 449   4                  fell_flag=0;  
 450   4                  raised_flag=0;
 451   4                  sensor_trigger_count = 0;
 452   4                  sensor_1ststage_count = 0;
 453   4                  sensor_2ndstage_count = 0;
 454   4                  sensor_2ndstage_time = 0;
 455   4                  sensor_3rdstage_time = 0;
 456   4                  sensor_3rdstage_interval = 0;
 457   4                  sensor_3rdstage_count = 0;
 458   4                  sensor_3rdstage_effcount = 0;
 459   4                  stolen_alarm_flag = 0;
 460   4                  host_stolen_alarm1_EN = 0;
 461   4                  host_stolen_alarm1_count = 0;
 462   4                  host_stolen_alarm2_EN = 0;
 463   4                  host_stolen_alarm2_count = 0;
 464   4                  
 465   4                  raised_fell_flag = 0;
 466   4                  
 467   4                  // reset the wire broken count
 468   4                  wire_broken_count = 0;
 469   4                  
 470   4                  // reset the battery stolen flag
 471   4                  battery_stolen_EN = 0;
 472   4                  battery_stolen_count = 0;
 473   4                  }
 474   3               break;
 475   3               }
 476   2            }
 477   1         }
 478          
 479          /*--------------------------------------------------
 480             InitTimer()
 481             
 482             ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
C51 COMPILER V9.51   TIMER                                                                 04/15/2014 13:54:33 PAGE 9   

 483          ---------------------------------------------------*/
 484          
 485          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
 486             {
 487   1         tLong Inc_T0, Inc_T1;
 488   1         tWord timer0_16, timer1_16;
 489   1         
 490   1         //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 491   1         Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 492   1         timer0_16 = (tWord) (65536UL - Inc_T0);
 493   1         timer0_8H = (tByte) (timer0_16 / 256);
 494   1         timer0_8L = (tByte) (timer0_16 % 256);
 495   1         
 496   1         //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 497   1         Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
 498   1         timer1_16 = (tWord) (65536UL - Inc_T1);
 499   1         timer1_8H = (tByte) (timer1_16 / 256);
 500   1         timer1_8L = (tByte) (timer1_16 % 256);
 501   1         
 502   1         TMOD = 0x11;
 503   1         
 504   1         TH0 = timer0_8H;
 505   1         TL0 = timer0_8L;
 506   1         TH1 = timer1_8H;
 507   1         TL1 = timer1_8L;
 508   1      
 509   1         ET0 = 1;
 510   1         TR0 = 1;
 511   1         ET1 = 1;
 512   1         TR1 = 1;
 513   1         PT1 = 1;       
 514   1         EA = 1;
 515   1         }
 516          
 517          /*---------------------------------------------------------------------
 518             sEos_Go_To_Sleep()
 519             ½«MCU½øÈëÐÝÃß×´Ì¬
 520          ----------------------------------------------------------------------*/
 521          void sEOS_Go_To_Sleep(void)
 522             {
 523   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 524   1         }
 525             
 526          /*---------------------------------------------------
 527             end of file
 528          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1014    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     57      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     25    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
