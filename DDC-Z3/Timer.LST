C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  Timer.c (v1.00)
   3                  
   4                  Timer functions
   5          ---------------------------------------------------*/   
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;                  // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                                                    // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;                                   //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                                            //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;                               //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;             //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                                                //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;                                     // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;                                    // increment every 2s, reset for every success communication
  37          bit raised_flag=0;                                      //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;        //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;                //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;           //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;                 //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;             //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;                        //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;             //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;                           //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;                        //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;           //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;           //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;  //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;               // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;                      //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;                           //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;             //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;                       //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;                        //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;                    //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;                        // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0; // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          bit vibration_flag = 0;
  86          tWord vibration_count = 0;
  87          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  88          
  89          /*------------------------------------------------------------------
  90                  timerT0()
  91                  operation every ticket.
  92          --------------------------------------------------------------------*/
  93          
  94          void timer0() interrupt interrupt_timer_0_overflow
  95                  {
  96   1              // manually reload timer0 configuration
  97   1              TH0 = timer0_8H;
  98   1              TL0 = timer0_8L;
  99   1              
 100   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 101   1              if(++timer0_count >= 3000)
 102   1                      {
 103   2                      // reset timer0 ticket counter every 2s
 104   2                      timer0_count=0;
 105   2                      
 106   2                      // detect the battery voltage
 107   2                      ADC_check_result = GetADCResult(6);     
 108   2                      
 109   2                      // if fell and raised flag is 1, send alarm signal every 2s.
 110   2                      if((fell_flag==1)&&(fell_alarm_count<5))
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 3   

 111   2                              {
 112   3                              ComMode_5_Data();
 113   3                              fell_alarm_count++;
 114   3                              }
 115   2                      if((raised_flag==1)&&(raised_alarm_count<5))            
 116   2                              {
 117   3                              ComMode_4_Data();
 118   3                              raised_alarm_count++;
 119   3                              }
 120   2                              
 121   2                      if((battery_stolen_EN == 1)&&(battery_stolen_count < 4))
 122   2                              {
 123   3                              if(key_rotate == 1)
 124   3                                      {
 125   4                                      ComMode_2_Data();
 126   4                                      battery_stolen_speech();
 127   4                                      battery_stolen_count++;
 128   4                                      }
 129   3                              }
 130   2                      }
 131   1                                                      
 132   1              // detect whether key is rotated on,  
 133   1              if((key_rotate == 0)&&(key_rotated_on_flag == 0))               
 134   1                      {
 135   2                      Delay(5);
 136   2                      // anti-trigger, Delay(5) confirm the key rotation.
 137   2                      if(key_rotate == 0)
 138   2                              {
 139   3                              slave_nearby_operation();
 140   3                              // flag key rotation status
 141   3                              key_rotated_on_flag = 1;
 142   3                              }
 143   2                      } 
 144   1                      
 145   1              
 146   1              // detect whether key is rotated off
 147   1              if(vibration_flag == 0)
 148   1                      {
 149   2                      if((key_rotate == 1)&&(key_rotated_on_flag == 1))
 150   2                              {
 151   3                              Delay(5);
 152   3                              if(key_rotate == 1)
 153   3                                      {
 154   4                                      // handle with battery status
 155   4                                      verifybattery(ADC_check_result);
 156   4                                      // reset key rotation flag
 157   4                                      key_rotated_on_flag=0;
 158   4                                      
 159   4                                      slave_away_operation();
 160   4                                      }
 161   3                              }
 162   2                 }
 163   1                      
 164   1              if(vibration_flag == 1)
 165   1                      {
 166   2                      if(++vibration_count > 3000)
 167   2                              {
 168   3                              vibration_flag = 0;
 169   3                              vibration_count = 0;
 170   3                              }
 171   2                      }               
 172   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 4   

 173   1                      {
 174   2                      Delay(2);
 175   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 176   2                              {
 177   3                              vibration_flag = 1;
 178   3                              vibration_count = 0;                    
 179   3                              }
 180   2                      }               
 181   1      
 182   1              // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 183   1              if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 184   1                      {
 185   2                      stolen_alarm_flag = 1;
 186   2                      if(key_rotate == 1)
 187   2                              {
 188   3                              if(wire_broken_flag == 0)
 189   3                                      {
 190   4                                      ComMode_3_Data();                                                                  
 191   4                                      }
 192   3                              else
 193   3                                      {                                                                     
 194   4                                      ComMode_6_Data();
 195   4                                      }
 196   3                                      
 197   3                              stolen_alarm_speech1();
 198   3                              }
 199   2                      if(++host_stolen_alarm1_count >= 4)
 200   2                              {                                                                                       
 201   3                              host_stolen_alarm1_count = 0;
 202   3                              host_stolen_alarm1_EN = 0;
 203   3                              stolen_alarm_flag = 0;
 204   3                              }
 205   2                      }
 206   1              if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 207   1                      {
 208   2                      stolen_alarm_flag = 1;
 209   2                      if(key_rotate == 1)
 210   2                              {
 211   3                              if(wire_broken_flag == 0)
 212   3                                      {
 213   4                                      ComMode_3_Data();
 214   4                                      }
 215   3                              else
 216   3                                      {
 217   4                                      ComMode_6_Data();
 218   4                                      }
 219   3      
 220   3                              stolen_alarm_speech2();
 221   3                              }
 222   2                      if(++host_stolen_alarm2_count >= 4)
 223   2                              {
 224   3                              host_stolen_alarm2_count = 0;
 225   3                              host_stolen_alarm2_EN = 0;
 226   3                              stolen_alarm_flag = 0;
 227   3                              }
 228   2                      }
 229   1      
 230   1              // judge host is fell or raised every 1ms?
 231   1      //      if(raised_fell_flag == 0)
 232   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 233   1                      {
 234   2                      // judge vibration sensor is enable?
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 5   

 235   2                      if(sensor_EN == 1)      
 236   2                              {                       
 237   3                              // sensor trigger status, 0, 1 or 2?
 238   3                              switch(sensor_trigger_count)
 239   3                                      {
 240   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 241   4                                      case 0:
 242   4                                              {
 243   5                                              
 244   5                                              // judge host been touched and also not in vibration alarm
 245   5      //                                      if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 246   5                                              if((sensor_detect == 0)&&(stolen_alarm_flag == 0))              
 247   5                                                      {
 248   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 249   6                                                      if(++sensor_1ststage_count >= 2)                        
 250   6                                                              {
 251   7                                                              sensor_1ststage_count=0;
 252   7                                                              
 253   7                                                              // sensor trigge status progress to case 1.
 254   7                                                              sensor_trigger_count = 1;
 255   7                                                              // alarm speech for first touoch
 256   7                                                              host_touch_speech();
 257   7                           }
 258   6                                                      }
 259   5                                              else
 260   5                                                      {
 261   6                                                      // if no LV, reset the count.
 262   6                                                      sensor_1ststage_count = 0;
 263   6                                                      }
 264   5                                              }
 265   4                                      break;
 266   4                                      
 267   4                                      // waiting for next touch, 
 268   4                                      case 1:
 269   4                                              {
 270   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 271   5                                              if(sensor_detect == 0)
 272   5                                                      {
 273   6                                                      // LV for 2s, means a effective touch
 274   6                                                      if(++sensor_2ndstage_count >= 2)
 275   6                                                              {
 276   7                                                              sensor_2ndstage_count = 0;
 277   7                                                              sensor_trigger_count = 2;
 278   7                                                              host_2ndtouch_speech_count = 0;
 279   7                                                              // alarm speech for 2nd touch
 280   7                                                              host_2ndtouch_speech();
 281   7                                                              }
 282   6                                                      }
 283   5                                              else
 284   5                                                      {
 285   6                                                      sensor_2ndstage_count = 0;
 286   6                                                      }
 287   5                                              
 288   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 289   5                                              if(++sensor_2ndstage_time >= 4000)
 290   5                                                      {
 291   6                                                      sensor_trigger_count = 0;
 292   6                                                      sensor_2ndstage_count = 0;
 293   6                                                      sensor_1ststage_count = 0;
 294   6                                                      sensor_2ndstage_time = 0;
 295   6                                                      }
 296   5                                              }
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 6   

 297   4                                      break;
 298   4                                      
 299   4                                      // waiting for 3rd touch
 300   4                                      case 2:
 301   4                                              {
 302   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 303   5                                              if(sensor_detect == 0)                          
 304   5                                                      {
 305   6                                                      // 2s LV is a effective touch
 306   6                                                      if(++sensor_3rdstage_count >= 2)
 307   6                                                              {
 308   7                                                              sensor_3rdstage_count = 0;
 309   7                                                              // stolen alarm speech enable
 310   7                                                              host_stolen_alarm1_EN = 1;
 311   7                                                              host_stolen_alarm2_EN = 1;                                              
 312   7                                                              }
 313   6                                                      }
 314   5                                              else
 315   5                                                      {
 316   6                                                      sensor_3rdstage_count = 0;
 317   6                                                      }
 318   5                                              
 319   5                                              // if there is no touch in 4s, reset all.
 320   5                                              if(++sensor_3rdstage_time >= 4000)
 321   5                                                      {
 322   6                                                      sensor_trigger_count = 0;
 323   6                                                      sensor_1ststage_count = 0;
 324   6                                                      sensor_2ndstage_count = 0;
 325   6                                                      sensor_2ndstage_time = 0;
 326   6                                                      sensor_3rdstage_time = 0;
 327   6                                                      sensor_3rdstage_interval = 800;
 328   6                                                      sensor_3rdstage_count = 0;
 329   6                                                      sensor_3rdstage_effcount = 0;                                   
 330   6                                                      }
 331   5                                              }
 332   4                                      break;
 333   4                                      }
 334   3                              
 335   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 336   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 337   3                                      {
 338   4                  if(++wire_broken_count > 50)
 339   4                                              {
 340   5                                              host_stolen_alarm1_EN = 1;
 341   5                                              host_stolen_alarm2_EN = 1;      
 342   5                                              wire_broken_count = 51;
 343   5                                              wire_broken_flag = 1;
 344   5                     }
 345   4                                      }
 346   3                              
 347   3                              // judge whether battery has been stolen, 0.4V/4V
 348   3                              if(ADC_check_result < 0x100)
 349   3                                      {
 350   4                                      battery_stolen_EN = 1;
 351   4                                      }
 352   3                              else if(ADC_check_result > 0x200)
 353   3                                      {
 354   4                                      battery_stolen_EN = 0;
 355   4                                      battery_stolen_count = 0;
 356   4                                      }                       
 357   3                              }
 358   2                      }
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 7   

 359   1              
 360   1              // judge whether position sensor is enable
 361   1              if(position_sensor_EN==1)               
 362   1                      {
 363   2                      // judge whether there is a LV
 364   2                      if(raised_sensor_detect == 0)   
 365   2                              {
 366   3                              // LV > 0.5s means a effective input
 367   3                              if(++raise_wire_time >= 3)
 368   3                                      {
 369   4                                      // flag raised, and reset fell
 370   4                                      raised_flag=1;
 371   4                                      fell_flag=0;
 372   4                                      raise_wire_time = 11;
 373   4                                      // judge whether there once been a raised or fell.
 374   4                                      if(raised_fell_once_flag == 0)
 375   4                                              {
 376   5                                              // if no, flag raised and fell flag
 377   5                                              raised_fell_flag = 1;                                   
 378   5                                              }
 379   4                                      }               
 380   3                              }
 381   2                      else
 382   2                              {
 383   3                              raised_flag=0;
 384   3                              raised_alarm_count=0;
 385   3                              raise_wire_time=0;
 386   3                              raised_fell_flag = 0;
 387   3                              }
 388   2            // judge whether there is a LV
 389   2                      if(fell_sensor_detect==0)
 390   2                              {
 391   3                              // LV > 0.5s means a effective input
 392   3                              if(++fell_wire_time >= 3)       
 393   3                                      {
 394   4                                      // flag fell, and reset raised
 395   4                                      fell_flag=1;                    
 396   4                                      raised_flag=0;
 397   4                                      fell_wire_time = 11;
 398   4                                      // judge whether there once been a raised or fell
 399   4                                      if(raised_fell_once_flag == 0)
 400   4                                              {
 401   5                                              raised_fell_flag = 1;                                   
 402   5                                              }
 403   4                                      }               
 404   3                              }
 405   2                      else
 406   2                              {
 407   3                              fell_flag=0;
 408   3                              fell_alarm_count=0;
 409   3                              fell_wire_time=0;
 410   3                              raised_fell_flag = 0;
 411   3                              }
 412   2                      }
 413   1              
 414   1              // judge whether raised or fell, if yes, reset all after 10s.
 415   1              if(raised_fell_flag == 1)
 416   1                      {
 417   2                      if(++raised_fell_number >= 4000)
 418   2                              {
 419   3                              raised_fell_flag = 0;
 420   3                              raised_fell_number = 0;
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 8   

 421   3                              raised_fell_once_flag = 1;
 422   3                              
 423   3                              sensor_trigger_count = 0;
 424   3                              sensor_1ststage_count = 0;
 425   3                              sensor_2ndstage_count = 0;
 426   3                              sensor_2ndstage_time = 0;
 427   3                              sensor_3rdstage_time = 0;
 428   3                              sensor_3rdstage_interval = 800;
 429   3                              sensor_3rdstage_count = 0;
 430   3                              sensor_3rdstage_effcount = 0;                                   
 431   3                              }
 432   2                      }
 433   1              }
 434          
 435          
 436          /*--------------------------------------------------------------------
 437                  timerT1()
 438                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 439          --------------------------------------------------------------------*/
 440          
 441          void timerT1() interrupt interrupt_timer_1_overflow
 442                  {
 443   1         // reload timer1
 444   1              TH1 = timer1_8H;                                
 445   1              TL1 = timer1_8L;
 446   1              
 447   1              // receive a tyte
 448   1              receive_byte();
 449   1              
 450   1              // receive a word after every byte
 451   1              receive_word();
 452   1              
 453   1              // judge whether a byte has received successfully
 454   1              if(receive_data_finished_flag == 1)
 455   1                      {
 456   2                      receive_data_finished_flag = 0;
 457   2                      // judge which mode is received.
 458   2                      switch(received_data_buffer[2])                 
 459   2                              {
 460   3                              case ComMode_1:  
 461   3                                      {
 462   4                                      if((nearby_away_interval > 6)||(key_rotate == 0))
 463   4                                              {
 464   5                                              // if receive a ComMode_1 successfully, operation for slave nearby
 465   5                                              slave_nearby_EN = 1;
 466   5                                              nearby_away_interval = 0;                                       
 467   5                                              }
 468   4                                      leave_count = 0;
 469   4                                      
 470   4                                      // turn off vibration and position sensor
 471   4                                      sensor_EN = 0;                                                  
 472   4                                      position_sensor_EN=0;                   
 473   4                                      // reset all the flag in sensor
 474   4                                      fell_flag=0;  
 475   4                                      raised_flag=0;
 476   4                                      sensor_trigger_count = 0;
 477   4                                      sensor_1ststage_count = 0;
 478   4                                      sensor_2ndstage_count = 0;
 479   4                                      sensor_2ndstage_time = 0;
 480   4                                      sensor_3rdstage_time = 0;
 481   4                                      sensor_3rdstage_interval = 0;
 482   4                                      sensor_3rdstage_count = 0;
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 9   

 483   4                                      sensor_3rdstage_effcount = 0;
 484   4                                      stolen_alarm_flag = 0;
 485   4                                      host_stolen_alarm1_EN = 0;
 486   4                                      host_stolen_alarm1_count = 0;
 487   4                                      host_stolen_alarm2_EN = 0;
 488   4                                      host_stolen_alarm2_count = 0;
 489   4                                      
 490   4                                      raised_fell_flag = 0;
 491   4                                      
 492   4                                      // reset the wire broken count
 493   4                                      wire_broken_count = 0;
 494   4                                      
 495   4                                      // reset the battery stolen flag
 496   4                                      battery_stolen_EN = 0;
 497   4                                      battery_stolen_count = 0;
 498   4                                      }
 499   3                              break;
 500   3                              }
 501   2                      }
 502   1              }
 503          
 504          /*--------------------------------------------------
 505                  InitTimer()
 506                  
 507                  ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
 508          ---------------------------------------------------*/
 509          
 510          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
 511                  {
 512   1              tLong Inc_T0, Inc_T1;
 513   1              tWord timer0_16, timer1_16;
 514   1              
 515   1              //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 516   1              Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 517   1              timer0_16 = (tWord) (65536UL - Inc_T0);
 518   1              timer0_8H = (tByte) (timer0_16 / 256);
 519   1              timer0_8L = (tByte) (timer0_16 % 256);
 520   1              
 521   1              //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 522   1              Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
 523   1              timer1_16 = (tWord) (65536UL - Inc_T1);
 524   1              timer1_8H = (tByte) (timer1_16 / 256);
 525   1              timer1_8L = (tByte) (timer1_16 % 256);
 526   1              
 527   1              TMOD = 0x11;
 528   1              
 529   1              TH0 = timer0_8H;
 530   1              TL0 = timer0_8L;
 531   1              TH1 = timer1_8H;
 532   1              TL1 = timer1_8L;
 533   1      
 534   1              ET0 = 1;
 535   1              TR0 = 1;
 536   1              ET1 = 1;
 537   1              TR1 = 1;
 538   1              PT1 = 1;                        
 539   1              EA = 1;
 540   1              }
 541          
 542          /*---------------------------------------------------------------------
 543                  sEos_Go_To_Sleep()
 544                  ½«MCU½øÈëÐÝÃß×´Ì¬
C51 COMPILER V9.51   TIMER                                                                 05/08/2014 09:49:59 PAGE 10  

 545          ----------------------------------------------------------------------*/
 546          void sEOS_Go_To_Sleep(void)
 547             {
 548   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 549   1         }
 550                  
 551          /*---------------------------------------------------
 552                  end of file
 553          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1022    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     57      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     26    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
