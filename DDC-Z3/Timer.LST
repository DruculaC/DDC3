C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Timer.c BROWSE DEBUG OBJECTEXTEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             Timer.c (v1.00)
   3             
   4             Timer functions
   5          ---------------------------------------------------*/ 
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "Timer.h"
  11          #include "communication.h"
  12          #include "voice.h"
  13          #include "Delay.h"
  14          #include "Battery.h"
  15          #include "AD.h"
  16          #include "Other.h"
  17          #include "operation.h"
  18          
  19          // ------ Public variable declarations -----------------------------
  20          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  21          bit host_stolen_speech_EN = 0;         // when host been touch 3 times, enable 3rd alarm voice.
  22          bit battery_check=0;                   // 2ÖÃ1Ê±£¬Ö´ÐÐÒ»´ÎµçÁ¿×ª»»£¬Ö´ÐÐÍêºó£¬½«ÆäÖÃ0
  23          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ÐÆ÷£¬¼´µ¹µØÌ§Æð´«¸ÐÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ÐÆ÷
  24          bit slave_away_speech_EN=0;      //ÅÐ¶Ï¸½»úÀë¿ªºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  25          bit magnet_CW_EN = 0;               //µç´ÅÌúË³Ê±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  26          bit magnet_ACW_EN=0;                //µç´ÅÌúÄæÊ±Õë×ª¶¯Ê¹ÄÜ£¬×ª¶¯Ò»´Îºó¸´Î»Îª0
  27          bit comm_whole_control=0;           //Í¨ÐÅ×Ü¿ª¹Ø£¬0¹Ø±ÕÍ¨ÐÅ£¬1´ò¿ªÍ¨ÐÅ
  28          tWord host_stolen_speech_count=0;   //ÅÐ¶ÏÖ÷»ú±»µÁºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  29          bit slave_nearby_speech_EN=0;       //ÅÐ¶Ï¸½½ü¿¿½üºó£¬ÓïÒôÌáÊ¾£¬ÔÚmainÀïÃæ²Ù×÷
  30          bit host_stolen_alarm1_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  31          bit host_stolen_alarm2_EN = 0;      //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒôÊ¹ÄÜ
  32          tByte host_stolen_alarm1_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊý
  33          tByte host_stolen_alarm2_count = 0;    //ÅÐ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶þ¶ÎÓïÒô´ÎÊý
  34          bit fell_flag=0;                 //ÅÐ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  35          bit slave_away = 1;              // flag for slave, 1 means away, 0 means nearby
  36          tByte leave_count=0;             // increment every 2s, reset for every success communication
  37          bit raised_flag=0;               //ÅÐ¶ÏÖ÷»ú±»Ì§Æðºó£¬ÖÃ1
  38          tByte sensor_2ndstage_LV_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  39          tByte sensor_2ndstage_count = 0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tByte host_2ndtouch_speech_count = 0;     //Ö÷»ú±»µÚ¶þ´Î´¥Åöºó£¬ÓïÒôÌáÊ¾µÄ´ÎÊý
  41          tWord sensor_3rdstage_time = 0;        //´«¸ÐÆ÷½øÈëµÚÈý½×¶ÎµÄÊ±¼ä£¬
  42          tByte sensor_3rdstage_effcount = 0;    //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬ÓÐÐ§´¥Åö´ÎÊýµÄ¼ÆÊý
  43          tByte sensor_3rdstage_count = 0;       //´«¸ÐÆ÷½øÈëµÚÈý½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊý
  44          tWord sensor_3rdstage_interval = 0;    //´«¸ÐÆ÷ÔÚµÚÈý½×¶ÎÖÐ£¬Ã¿´ÎÓÐÐ§µÍµçÆ½¼ÆÊýÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓÐÐ§¡£
  45          bit host_touch_speech_EN = 0;          //µÚÒ»´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  46          bit host_2ndtouch_speech_EN = 0;       //µÚ¶þ´Î´¥ÅöºóÓïÒôÊ¹ÄÜ
  47          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æð´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  48          tByte sensor_trigger_count=0;    //´«¸ÐÆ÷´¥·¢¼ÆÊý
  49          tWord sensor_2ndstage_time=0;    //´«¸ÐÆ÷½øÈëµÚ¶þ½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊý
  50          tByte sensor_1ststage_count=0;   //´«¸ÐÆ÷µÚÒ»½×¶ÎÅÐ¶ÏµÍµçÆ½µÄ¼ÆÊý
  51          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  52          bit magnet_ACW_flag=0;
  53          
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 2   

  54          // ------ Private variable definitions -----------------------------
  55          tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;     // register value of timer0 and timer1, caculated from 
             -InitTimer()
  56          
  57          tByte host_touch_speech_count=0;
  58          tByte host_touched_flag=0;       //Ö÷»ú±»´¥ÅöºóÖÃ1£¬½øÐÐºóÃæµÄ´«¸ÐÆ÷ÅÐ¶Ï
  59          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æðºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  60          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ÐÅºÅµÄ´ÎÊý
  61          tWord timer0_count=0;      // counter for timer0, increment every ticket         
  62          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊý¾Ý»º´æ
  63          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êý¾ÝÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  64          tByte data_count = 0;            //½ÓÊÕÊý¾Ý»º´æµÄÎ»Êý£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊý¾Ý
  65          tByte one_receive_byte = 0;      //½ÓÊÕÊý¾ÝµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  66          tByte one_receive_byte_count = 0;         //one_receive_byteÓÐ8Î»£¬´Ë¼ÆÊý±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊýµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  67          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ÐÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅÐ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕýÈ·µÄÏÂ½µÑØ
  68          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓÐÐÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊý£¬Ò»µ©³¬¹ýÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  69          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅÐ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊý¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  70          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  71          tByte raise_wire_time=0;         //Ì§Æð¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  72          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æð³ö·¢ºó£¬¼ÆÊý£¬µ½´ïÒ»¶¨ÊýÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆðÇåÁã¡£
  73          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ý£¬Èç¹û±êÖ¾¹ýÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆðÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  74          tByte key_rotated_on_flag=0;        //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  75          tByte slave_nearby_speech_count=0;
  76          tByte slave_away_speech_count=0;
  77          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  78          bit slave_nearby_EN = 0;         // ×÷Îªslave¿¿½üºó²Ù×÷µÄÊ¹ÄÜ
  79          tByte slave_nearby_operation_count = 0;   // ×÷Îªslave¿¿½üºó²Ù×÷µÄ´ÎÊý
  80          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  81          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  82          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊý
  83          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ÐÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ÐÐ¹ØÔ¿³×µÄ²Ù×÷¡
  84          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ÐÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øÐÐ¼ÆÊý¡£
  85          bit vibration_flag = 0;
  86          tWord vibration_count = 0;
  87          
  88          /*------------------------------------------------------------------
  89             timerT0()
  90             operation every ticket.
  91          --------------------------------------------------------------------*/
  92          
  93          void timer0() interrupt interrupt_timer_0_overflow
  94             {
  95   1         // manually reload timer0 configuration
  96   1         TH0 = timer0_8H;
  97   1         TL0 = timer0_8L;
  98   1         
  99   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 100   1         if(++timer0_count >= 3000)
 101   1            {
 102   2            // reset timer0 ticket counter every 2s
 103   2            timer0_count=0;
 104   2            
 105   2            // detect the battery voltage
 106   2            ADC_check_result = GetADCResult(6); 
 107   2            
 108   2            // if fell and raised flag is 1, send alarm signal every 2s.
 109   2            if((fell_flag==1)&&(fell_alarm_count<5))
 110   2               {
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 3   

 111   3               ComMode_5_Data();
 112   3               fell_alarm_count++;
 113   3               }
 114   2            if((raised_flag==1)&&(raised_alarm_count<5))    
 115   2               {
 116   3               ComMode_4_Data();
 117   3               raised_alarm_count++;
 118   3               }
 119   2               
 120   2            if((battery_stolen_EN == 1)&&(battery_stolen_count < 4))
 121   2               {
 122   3               if(key_rotate == 1)
 123   3                  {
 124   4                  ComMode_2_Data();
 125   4                  battery_stolen_speech();
 126   4                  battery_stolen_count++;
 127   4                  }
 128   3               }
 129   2            }
 130   1                        
 131   1         // detect whether key is rotated on,  
 132   1         if((key_rotate == 0)&&(key_rotated_on_flag == 0))     
 133   1            {
 134   2            Delay(5);
 135   2            // anti-trigger, Delay(5) confirm the key rotation.
 136   2            if(key_rotate == 0)
 137   2               {
 138   3               slave_nearby_operation();
 139   3               // flag key rotation status
 140   3               key_rotated_on_flag = 1;
 141   3               }
 142   2            } 
 143   1            
 144   1         
 145   1         // detect whether key is rotated off
 146   1         if(vibration_flag == 0)
 147   1            {
 148   2            if((key_rotate == 1)&&(key_rotated_on_flag == 1))
 149   2               {
 150   3               Delay(5);
 151   3               if(key_rotate == 1)
 152   3                  {
 153   4                  // handle with battery status
 154   4                  verifybattery(ADC_check_result);
 155   4                  // reset key rotation flag
 156   4                  key_rotated_on_flag=0;
 157   4                  
 158   4                  slave_away_operation();
 159   4                  }
 160   3               }
 161   2            }
 162   1            
 163   1         if(vibration_flag == 1)
 164   1            {
 165   2            if(++vibration_count > 3000)
 166   2               {
 167   3               vibration_flag = 0;
 168   3               vibration_count = 0;
 169   3               }
 170   2            }     
 171   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 172   1            {
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 4   

 173   2            vibration_flag = 1;
 174   2            vibration_count = 0;
 175   2            }     
 176   1      
 177   1         // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 178   1         if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 179   1            {
 180   2            stolen_alarm_flag = 1;
 181   2            if(key_rotate == 1)
 182   2               {
 183   3               ComMode_3_Data();
 184   3               stolen_alarm_speech1();
 185   3               }
 186   2            if(++host_stolen_alarm1_count >= 4)
 187   2               {
 188   3               host_stolen_alarm1_count = 0;
 189   3               host_stolen_alarm1_EN = 0;
 190   3               stolen_alarm_flag = 0;
 191   3               }
 192   2            }
 193   1         if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 194   1            {
 195   2            stolen_alarm_flag = 1;
 196   2            if(key_rotate == 1)
 197   2               {
 198   3               ComMode_3_Data();
 199   3               stolen_alarm_speech2();
 200   3               }
 201   2            if(++host_stolen_alarm2_count >= 4)
 202   2               {
 203   3               host_stolen_alarm2_count = 0;
 204   3               host_stolen_alarm2_EN = 0;
 205   3               stolen_alarm_flag = 0;
 206   3               }
 207   2            }
 208   1      
 209   1         // judge host is fell or raised every 1ms?
 210   1      // if(raised_fell_flag == 0)
 211   1         if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 212   1            {
 213   2            // judge vibration sensor is enable?
 214   2            if(sensor_EN == 1)   
 215   2               {        
 216   3               // sensor trigger status, 0, 1 or 2?
 217   3               switch(sensor_trigger_count)
 218   3                  {
 219   4                  // case 0, it means host is in waiting status. waiting for first touch.
 220   4                  case 0:
 221   4                     {
 222   5                     
 223   5                     // judge host been touched and also not in vibration alarm
 224   5      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 225   5                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))      
 226   5                        {
 227   6                        // judge LV is more than 2ms, if yes, it means a effective touch
 228   6                        if(++sensor_1ststage_count >= 2)       
 229   6                           {
 230   7                           sensor_1ststage_count=0;
 231   7                           
 232   7                           // sensor trigge status progress to case 1.
 233   7                           sensor_trigger_count = 1;
 234   7                           // alarm speech for first touoch
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 5   

 235   7                           host_touch_speech();
 236   7                           }
 237   6                        }
 238   5                     else
 239   5                        {
 240   6                        // if no LV, reset the count.
 241   6                        sensor_1ststage_count = 0;
 242   6                        }
 243   5                     }
 244   4                  break;
 245   4                  
 246   4                  // waiting for next touch, 
 247   4                  case 1:
 248   4                     {
 249   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 250   5                        {
 251   6                        // LV for 2s, means a effective touch
 252   6                        if(++sensor_2ndstage_count >= 2)
 253   6                           {
 254   7                           sensor_2ndstage_count = 0;
 255   7                           sensor_trigger_count = 2;
 256   7                           host_2ndtouch_speech_count = 0;
 257   7                           // alarm speech for 2nd touch
 258   7                           host_2ndtouch_speech();
 259   7                           }
 260   6                        }
 261   5                     else
 262   5                        {
 263   6                        sensor_2ndstage_count = 0;
 264   6                        }
 265   5                     
 266   5                     // if there is no touch in 4s, reset sensor trigger status, etc.
 267   5                     if(++sensor_2ndstage_time >= 4000)
 268   5                        {
 269   6                        sensor_trigger_count = 0;
 270   6                        sensor_2ndstage_count = 0;
 271   6                        sensor_1ststage_count = 0;
 272   6                        sensor_2ndstage_time = 0;
 273   6                        }
 274   5                     }
 275   4                  break;
 276   4                  
 277   4                  // waiting for 3rd touch
 278   4                  case 2:
 279   4                     {
 280   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 281   5                        {
 282   6                        // 2s LV is a effective touch
 283   6                        if(++sensor_3rdstage_count >= 2)
 284   6                           {
 285   7                           sensor_3rdstage_count = 0;
 286   7                           // stolen alarm speech enable
 287   7                           host_stolen_alarm1_EN = 1;
 288   7                           host_stolen_alarm2_EN = 1;                
 289   7                           }
 290   6                        }
 291   5                     else
 292   5                        {
 293   6                        sensor_3rdstage_count = 0;
 294   6                        }
 295   5                     
 296   5                     // if there is no touch in 4s, reset all.
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 6   

 297   5                     if(++sensor_3rdstage_time >= 4000)
 298   5                        {
 299   6                        sensor_trigger_count = 0;
 300   6                        sensor_1ststage_count = 0;
 301   6                        sensor_2ndstage_count = 0;
 302   6                        sensor_2ndstage_time = 0;
 303   6                        sensor_3rdstage_time = 0;
 304   6                        sensor_3rdstage_interval = 800;
 305   6                        sensor_3rdstage_count = 0;
 306   6                        sensor_3rdstage_effcount = 0;             
 307   6                        }
 308   5                     }
 309   4                  break;
 310   4                  }
 311   3               
 312   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 313   3               if((wire_broken == 0) && (wire_broken_count < 51))  
 314   3                  {
 315   4                  if(++wire_broken_count > 50)
 316   4                     {
 317   5                     host_stolen_alarm1_EN = 1;
 318   5                     host_stolen_alarm2_EN = 1; 
 319   5                     wire_broken_count = 51;
 320   5                     }
 321   4                  }
 322   3               
 323   3               // judge whether battery has been stolen, 0.4V/4V
 324   3               if(ADC_check_result < 0x100)
 325   3                  {
 326   4                  battery_stolen_EN = 1;
 327   4                  }
 328   3               else if(ADC_check_result > 0x200)
 329   3                  {
 330   4                  battery_stolen_EN = 0;
 331   4                  battery_stolen_count = 0;
 332   4                  }        
 333   3               }
 334   2            }
 335   1         
 336   1         // judge whether position sensor is enable
 337   1         if(position_sensor_EN==1)     
 338   1            {
 339   2            // judge whether there is a LV
 340   2            if(raised_sensor_detect == 0) 
 341   2               {
 342   3               // LV > 0.5s means a effective input
 343   3               if(++raise_wire_time >= 3)
 344   3                  {
 345   4                  // flag raised, and reset fell
 346   4                  raised_flag=1;
 347   4                  fell_flag=0;
 348   4                  raise_wire_time = 11;
 349   4                  // judge whether there once been a raised or fell.
 350   4                  if(raised_fell_once_flag == 0)
 351   4                     {
 352   5                     // if no, flag raised and fell flag
 353   5                     raised_fell_flag = 1;               
 354   5                     }
 355   4                  }     
 356   3               }
 357   2            else
 358   2               {
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 7   

 359   3               raised_flag=0;
 360   3               raised_alarm_count=0;
 361   3               raise_wire_time=0;
 362   3               raised_fell_flag = 0;
 363   3               }
 364   2            // judge whether there is a LV
 365   2            if(fell_sensor_detect==0)
 366   2               {
 367   3               // LV > 0.5s means a effective input
 368   3               if(++fell_wire_time >= 3)  
 369   3                  {
 370   4                  // flag fell, and reset raised
 371   4                  fell_flag=1;         
 372   4                  raised_flag=0;
 373   4                  fell_wire_time = 11;
 374   4                  // judge whether there once been a raised or fell
 375   4                  if(raised_fell_once_flag == 0)
 376   4                     {
 377   5                     raised_fell_flag = 1;               
 378   5                     }
 379   4                  }     
 380   3               }
 381   2            else
 382   2               {
 383   3               fell_flag=0;
 384   3               fell_alarm_count=0;
 385   3               fell_wire_time=0;
 386   3               raised_fell_flag = 0;
 387   3               }
 388   2            }
 389   1         
 390   1         // judge whether raised or fell, if yes, reset all after 10s.
 391   1         if(raised_fell_flag == 1)
 392   1            {
 393   2            if(++raised_fell_number >= 4000)
 394   2               {
 395   3               raised_fell_flag = 0;
 396   3               raised_fell_number = 0;
 397   3               raised_fell_once_flag = 1;
 398   3               
 399   3               sensor_trigger_count = 0;
 400   3               sensor_1ststage_count = 0;
 401   3               sensor_2ndstage_count = 0;
 402   3               sensor_2ndstage_time = 0;
 403   3               sensor_3rdstage_time = 0;
 404   3               sensor_3rdstage_interval = 800;
 405   3               sensor_3rdstage_count = 0;
 406   3               sensor_3rdstage_effcount = 0;             
 407   3               }
 408   2            }
 409   1         }
 410          
 411          
 412          /*--------------------------------------------------------------------
 413             timerT1()
 414             ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ÐÐµÄ²Ù×÷
 415          --------------------------------------------------------------------*/
 416          
 417          void timerT1() interrupt interrupt_timer_1_overflow
 418             {
 419   1         // reload timer1
 420   1         TH1 = timer1_8H;           
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 8   

 421   1         TL1 = timer1_8L;
 422   1         
 423   1         // receive a tyte
 424   1         receive_byte();
 425   1         
 426   1         // receive a word after every byte
 427   1         receive_word();
 428   1         
 429   1         // judge whether a byte has received successfully
 430   1         if(receive_data_finished_flag == 1)
 431   1            {
 432   2            receive_data_finished_flag = 0;
 433   2            // judge which mode is received.
 434   2            switch(received_data_buffer[2])     
 435   2               {
 436   3               case ComMode_1:  
 437   3                  {
 438   4                  if((nearby_away_interval > 6)||(key_rotate == 0))
 439   4                     {
 440   5                     // if receive a ComMode_1 successfully, operation for slave nearby
 441   5                     slave_nearby_EN = 1;
 442   5                     nearby_away_interval = 0;              
 443   5                     }
 444   4                  leave_count = 0;
 445   4                  
 446   4                  // turn off vibration and position sensor
 447   4                  sensor_EN = 0;                   
 448   4                  position_sensor_EN=0;         
 449   4                  // reset all the flag in sensor
 450   4                  fell_flag=0;  
 451   4                  raised_flag=0;
 452   4                  sensor_trigger_count = 0;
 453   4                  sensor_1ststage_count = 0;
 454   4                  sensor_2ndstage_count = 0;
 455   4                  sensor_2ndstage_time = 0;
 456   4                  sensor_3rdstage_time = 0;
 457   4                  sensor_3rdstage_interval = 0;
 458   4                  sensor_3rdstage_count = 0;
 459   4                  sensor_3rdstage_effcount = 0;
 460   4                  stolen_alarm_flag = 0;
 461   4                  host_stolen_alarm1_EN = 0;
 462   4                  host_stolen_alarm1_count = 0;
 463   4                  host_stolen_alarm2_EN = 0;
 464   4                  host_stolen_alarm2_count = 0;
 465   4                  
 466   4                  raised_fell_flag = 0;
 467   4                  
 468   4                  // reset the wire broken count
 469   4                  wire_broken_count = 0;
 470   4                  
 471   4                  // reset the battery stolen flag
 472   4                  battery_stolen_EN = 0;
 473   4                  battery_stolen_count = 0;
 474   4                  }
 475   3               break;
 476   3               }
 477   2            }
 478   1         }
 479          
 480          /*--------------------------------------------------
 481             InitTimer()
 482             
C51 COMPILER V9.51   TIMER                                                                 04/17/2014 15:30:01 PAGE 9   

 483             ³õÊ¼»¯¶¨Ê±Æ÷T0ºÍT1
 484          ---------------------------------------------------*/
 485          
 486          void InitTimer(const tByte Tick_ms_T0, Tick_us_T1)
 487             {
 488   1         tLong Inc_T0, Inc_T1;
 489   1         tWord timer0_16, timer1_16;
 490   1         
 491   1         //¼ÆËãTimer0µÄ¼Ä´æÆ÷Öµ
 492   1         Inc_T0 = (tLong)Tick_ms_T0 * (OSC_FREQ/1000) / (tLong)OSC_PER_INST;
 493   1         timer0_16 = (tWord) (65536UL - Inc_T0);
 494   1         timer0_8H = (tByte) (timer0_16 / 256);
 495   1         timer0_8L = (tByte) (timer0_16 % 256);
 496   1         
 497   1         //¼ÆËãTimer1µÄ¼Ä´æÆ÷Öµ
 498   1         Inc_T1 = (tLong)Tick_us_T1 * (OSC_FREQ/1000000) / (tLong)OSC_PER_INST;
 499   1         timer1_16 = (tWord) (65536UL - Inc_T1);
 500   1         timer1_8H = (tByte) (timer1_16 / 256);
 501   1         timer1_8L = (tByte) (timer1_16 % 256);
 502   1         
 503   1         TMOD = 0x11;
 504   1         
 505   1         TH0 = timer0_8H;
 506   1         TL0 = timer0_8L;
 507   1         TH1 = timer1_8H;
 508   1         TL1 = timer1_8L;
 509   1      
 510   1         ET0 = 1;
 511   1         TR0 = 1;
 512   1         ET1 = 1;
 513   1         TR1 = 1;
 514   1         PT1 = 1;       
 515   1         EA = 1;
 516   1         }
 517          
 518          /*---------------------------------------------------------------------
 519             sEos_Go_To_Sleep()
 520             ½«MCU½øÈëÐÝÃß×´Ì¬
 521          ----------------------------------------------------------------------*/
 522          void sEOS_Go_To_Sleep(void)
 523             {
 524   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 525   1         }
 526             
 527          /*---------------------------------------------------
 528             end of file
 529          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1000    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     57      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     25    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
